name: Java CI/CD Pipeline

on:
  push:
    branches:
      - master
      - staging

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew assemble
      # (Optional) Add steps for running tests and generating reports

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: java-app
          path: build/libs/*.jar

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Test with Gradle
        run: |
          ./gradlew check --info --stacktrace
          ./gradlew test
          ./gradlew jacocoTestReport
      # (Optional) Add steps for generating coverage report and other post-test tasks

  publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Check directory
        run: ls -al
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app
      - name: Check directory
        run: ls -al
      - name: Docker login
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin docker.io
          else
            echo ${{ secrets.DOCKER_PASSWORD_STAGING }} | docker login -u ${{ secrets.REGISTRY_USER_STAGING }} --password-stdin docker.io
          fi
      - name: Set Docker BuildKit
        run: export DOCKER_BUILDKIT=1
      - name: Build Docker Image
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            docker build --build-arg PRODUCTION=$PRODUCTION --build-arg JDBC_DATABASE_PASSWORD=$JDBC_DATABASE_PASSWORD --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL --build-arg JDBC_DATABASE_USERNAME=$JDBC_DATABASE_USERNAME -t ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} .
            docker push ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}
          else
            docker build --build-arg PRODUCTION_STAGING=$PRODUCTION_STAGING --build-arg JDBC_DATABASE_PASSWORD_STAGING=$JDBC_DATABASE_PASSWORD_STAGING --build-arg JDBC_DATABASE_URL_STAGING=$JDBC_DATABASE_URL_STAGING --build-arg JDBC_DATABASE_USERNAME_STAGING=$JDBC_DATABASE_USERNAME_STAGING -t ${{ secrets.REGISTRY_USER_STAGING }}/${{ secrets.IMAGE_NAME_STAGING }}:${{ secrets.IMAGE_TAG_STAGING }} .
            docker push ${{ secrets.REGISTRY_USER_STAGING }}/${{ secrets.IMAGE_NAME_STAGING }}:${{ secrets.IMAGE_TAG_STAGING }}
          fi

  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install openssh-client

      - name: Create SSH key
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "${{ secrets.SSH_KEY }}" > ssh-key.pem
          else
            echo "${{ secrets.SSH_KEY_STAGING }}" > ssh-key.pem
          fi

      - name: Update permission
        run: chmod 400 ssh-key.pem
      - name: Deploy to GCP
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.GCP_USERNAME }}@${{ secrets.GCP_STATIC_IP }} "
              sudo docker container rm -f ${{ secrets.CONTAINER_NAME }} || true &&
              sudo docker image rm -f ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} || true &&
              sudo docker run --name ${{ secrets.CONTAINER_NAME }} -d -p 80:8080 ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}"
          else
            ssh -o StrictHostKeyChecking=no -i ssh-key.pem ${{ secrets.GCP_USERNAME_STAGING }}@${{ secrets.GCP_STATIC_IP_STAGING }} "
              sudo docker container rm -f ${{ secrets.CONTAINER_NAME_STAGING }} || true &&
              sudo docker image rm -f ${{ secrets.REGISTRY_USER_STAGING }}/${{ secrets.IMAGE_NAME_STAGING }}:${{ secrets.IMAGE_TAG_STAGING }} || true &&
              sudo docker run --name ${{ secrets.CONTAINER_NAME_STAGING }} -d -p 80:8080 ${{ secrets.REGISTRY_USER_STAGING }}/${{ secrets.IMAGE_NAME_STAGING }}:${{ secrets.IMAGE_TAG_STAGING }}"
          fi